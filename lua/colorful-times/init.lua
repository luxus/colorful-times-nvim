--- Colorful Times Plugin
---
--- A Neovim plugin that automatically changes your colorscheme based on a schedule, system settings, or manually.
---
--- This module can be loaded with `require('colorful-times')`.
---
--- Generated by OpenAI o1.
---

---@class ColorfulTimes
local M = {}

-- Create metatable for lazy loading functions
-- This prevents function definitions from being loaded until actually called
local _mt = {}
local _exported_fns = { "setup", "toggle", "reload" }

function _mt.__index(_, key)
	-- If it's a function we want to lazy-load
	if vim.tbl_contains(_exported_fns, key) then
		-- Load the implementation module on first access
		require("colorful-times.impl")
		-- Return the now-defined function
		return M[key]
	end
end

-- Type definitions for documentation purposes only
-- Actual implementation is in impl.lua

---@class ColorfulTimes.ScheduleEntry
---@field start string Start time in "HH:MM" format.
---@field stop string Stop time in "HH:MM" format.
---@field colorscheme string Name of the colorscheme to apply.
---@field background? string "light", "dark", "system", or nil.

---@class ColorfulTimes.ThemeConfig
---@field light string|nil Colorscheme to use in light mode (nil to use default).
---@field dark string|nil Colorscheme to use in dark mode (nil to use default).

---@class ColorfulTimes.DefaultConfig
---@field colorscheme string Default colorscheme when no schedule matches.
---@field background string "light", "dark", or "system".
---@field themes ColorfulTimes.ThemeConfig Default themes for light/dark mode.

---@class ColorfulTimes.Config
---@field schedule ColorfulTimes.ScheduleEntry[] Array of schedule entries.
---@field default ColorfulTimes.DefaultConfig Default colorscheme and background.
---@field enabled boolean Whether the plugin is enabled.
---@field refresh_time integer The refresh time in milliseconds for checking the system background.
---@field system_background_detection? string|fun():string Custom command or function to detect system background on Linux.

--- Plugin configuration.
---@type ColorfulTimes.Config
M.config = {
	schedule = {},
	default = {
		colorscheme = "default",
		background = "system",
		themes = {
			light = nil, -- When nil, uses default.colorscheme
			dark = nil, -- When nil, uses default.colorscheme
		},
	},
	enabled = true,
	refresh_time = 5000, -- Default refresh time in milliseconds
	system_background_detection = nil, -- Custom system background detection for Linux.
}

-- Type definitions for LSP documentation
---@class uv_timer_t
---@field start fun(self: uv_timer_t, timeout: number, repeat_interval: number, callback: function)
---@field stop fun(self: uv_timer_t)
---@field close fun(self: uv_timer_t)

---@class uv_pipe_t
---@field read_start fun(self: uv_pipe_t, callback: function)
---@field read_stop fun(self: uv_pipe_t)
---@field close fun(self: uv_pipe_t)

---@class uv_process_t
---@field close fun(self: uv_process_t)

---@class uv
---@field new_timer fun(): uv_timer_t
---@field new_pipe fun(ipc: boolean): uv_pipe_t
---@field spawn fun(path: string, options: table, on_exit: fun(code: number, signal: number)): uv_process_t
---@field os_uname fun(): { sysname: string }

---@class ColorfulTimes.ParsedScheduleEntry
---@field start_time integer Start time in minutes since midnight.
---@field stop_time integer Stop time in minutes since midnight.
---@field colorscheme string Name of the colorscheme to apply.
---@field background string "light", "dark", or "system".

-- The plugin uses lazy loading for all implementation details
-- Function definitions (setup, toggle, reload) are loaded on-demand
-- from the impl.lua module when they are first called
--
-- This significantly reduces the startup impact by avoiding:
-- 1. Loading vim.loop (uv) until needed
-- 2. Doing any initialization work during require
-- 3. Parsing schedules or executing system calls on startup
-- 4. Defining large functions during the initial module load

-- Apply the metatable to M for lazy loading
setmetatable(M, _mt)

-- Return a minimal interface - the rest will be loaded on demand
return M
